@page "/category"
@inherits CategoryBase
@using DocsBlazor.Const
@using Docs.Models

    <div class="m-3 mr-3" style="@GetBlocked()">
        <div>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <h2 style="font-weight:bold">Categorias</h2>
                </Column>
                <Column ColumnSize="ColumnSize.Is6" Class="d-flex">
                    <Button Color="Color.Dark" Clicked="@(() => OnNew())" class="ml-auto">Novo</Button>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    @if (CurrentOperation != FormOperation.Nenhum)
                    {
                        <Badge Color="Color.Dark">@Enum.GetName(typeof(FormOperation), CurrentOperation)</Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Dark">Registros</Badge>
                    }

                </Column>
                <Column ColumnSize="ColumnSize.Is6">

                </Column>
            </Row>
            <div style="height:55vh; overflow-y:scroll">
                <Table Hoverable="true" Striped="true" Narrow="true" Borderless="true">
                    <TableHeader ThemeContrast="ThemeContrast.Dark">
                        <TableRow>
                            <TableHeaderCell>Ações</TableHeaderCell>
                            <TableHeaderCell>ID</TableHeaderCell>
                            <TableHeaderCell>Nome</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @if (CategoryList != null)
                        {
                            foreach (CategoryModel category in CategoryList)
                            {
                                <TableRow>
                                    <TableRowCell Style="width:100px">
                                        <Button Class="btn-sm" Clicked="@(() => OnEdit(category))">
                                            <Icon Name="@("fa-wrench")"></Icon>
                                        </Button>
                                        <Button Class="btn-sm" Clicked="@(() => OnView(category))">
                                            <Icon Name="@("fa-search")"></Icon>
                                        </Button>
                                    </TableRowCell>
                                    <TableRowCell>@category.ID</TableRowCell>
                                    <TableRowCell>@category.NAME</TableRowCell>
                                </TableRow>
                            }
                        }
                    </TableBody>
                </Table>
            </div>
        </div>
        <div class="mt-3">
            @if ((((int)CurrentOperation) & ((int)FormOperation.Editando + (int)FormOperation.Visualizando + (int)FormOperation.Adicionando)) != 0)
            {
                if (CurrentCategory != null)
                {
                    <Card WhiteText="true" Background="Background.Dark">
                        <CardHeader>
                            Categoria: @CurrentCategory.NAME
                        </CardHeader>
                        <CardBody>
                            <Validations @ref="CategoryValidator" Mode="ValidationMode.Auto" Model="@CurrentCategory">
                                <Row>
                                    <Column ColumnSize="ColumnSize.Is12">
                                        <Field>
                                            <FieldLabel>Nome da Categoria</FieldLabel>
                                            <Validation>
                                                <TextEdit Placeholder="Nome"
                                                          Disabled="@(CurrentOperation == FormOperation.Visualizando)"
                                                          @bind-Text="@CurrentCategory.NAME" />
                                                <ValidationError />
                                            </Validation>
                                        </Field>
                                    </Column>
                                </Row>
                            </Validations>
                        </CardBody>
                        <CardFooter>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is9"></Column>
                                <Column ColumnSize="ColumnSize.Is3" Style="display: flex">
                                    <Button Disabled="@(CurrentOperation == FormOperation.Visualizando || CurrentOperation == FormOperation.Adicionando)"
                                            Clicked="@(() => OnDelete(CurrentCategory))" Color="Color.Dark" Style="margin-left:auto">
                                        Deletar
                                    </Button>
                                    <Button Clicked="@(() => OnCancel())" Color="Color.Dark">Cancelar</Button>
                                    <Button Clicked="@OnSave" Disabled="@(CurrentOperation == FormOperation.Visualizando)"
                                            Color="Color.Dark">
                                        Gravar
                                    </Button>
                                </Column>
                            </Row>
                        </CardFooter>
                    </Card>
                }
            }
        </div>
        <Snackbar @ref="@Toast" Interval="@ToastDismissTime">
            <SnackbarBody>
                @ToastMessage
            </SnackbarBody>
        </Snackbar>
        @if (this.Blocked)
        {
            <div class="blocked">
                <div class="spinner">

                </div>
            </div>
        }
    </div>
